// Code generated by MockGen. DO NOT EDIT.
// Source: route53.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	route53 "github.com/aws/aws-sdk-go-v2/service/route53"
	gomock "github.com/golang/mock/gomock"
)

// MockawsRoute53API is a mock of awsRoute53API interface.
type MockawsRoute53API struct {
	ctrl     *gomock.Controller
	recorder *MockawsRoute53APIMockRecorder
}

// MockawsRoute53APIMockRecorder is the mock recorder for MockawsRoute53API.
type MockawsRoute53APIMockRecorder struct {
	mock *MockawsRoute53API
}

// NewMockawsRoute53API creates a new mock instance.
func NewMockawsRoute53API(ctrl *gomock.Controller) *MockawsRoute53API {
	mock := &MockawsRoute53API{ctrl: ctrl}
	mock.recorder = &MockawsRoute53APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockawsRoute53API) EXPECT() *MockawsRoute53APIMockRecorder {
	return m.recorder
}

// ListHostedZones mocks base method.
func (m *MockawsRoute53API) ListHostedZones(ctx context.Context, params *route53.ListHostedZonesInput, optFns ...func(*route53.Options)) (*route53.ListHostedZonesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListHostedZones", varargs...)
	ret0, _ := ret[0].(*route53.ListHostedZonesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHostedZones indicates an expected call of ListHostedZones.
func (mr *MockawsRoute53APIMockRecorder) ListHostedZones(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHostedZones", reflect.TypeOf((*MockawsRoute53API)(nil).ListHostedZones), varargs...)
}
