// Code generated by MockGen. DO NOT EDIT.
// Source: lambda.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	lambda "github.com/aws/aws-sdk-go-v2/service/lambda"
	gomock "github.com/golang/mock/gomock"
)

// MockawsLambdaAPI is a mock of awsLambdaAPI interface.
type MockawsLambdaAPI struct {
	ctrl     *gomock.Controller
	recorder *MockawsLambdaAPIMockRecorder
}

// MockawsLambdaAPIMockRecorder is the mock recorder for MockawsLambdaAPI.
type MockawsLambdaAPIMockRecorder struct {
	mock *MockawsLambdaAPI
}

// NewMockawsLambdaAPI creates a new mock instance.
func NewMockawsLambdaAPI(ctrl *gomock.Controller) *MockawsLambdaAPI {
	mock := &MockawsLambdaAPI{ctrl: ctrl}
	mock.recorder = &MockawsLambdaAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockawsLambdaAPI) EXPECT() *MockawsLambdaAPIMockRecorder {
	return m.recorder
}

// ListFunctions mocks base method.
func (m *MockawsLambdaAPI) ListFunctions(ctx context.Context, params *lambda.ListFunctionsInput, optFns ...func(*lambda.Options)) (*lambda.ListFunctionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFunctions", varargs...)
	ret0, _ := ret[0].(*lambda.ListFunctionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFunctions indicates an expected call of ListFunctions.
func (mr *MockawsLambdaAPIMockRecorder) ListFunctions(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFunctions", reflect.TypeOf((*MockawsLambdaAPI)(nil).ListFunctions), varargs...)
}
