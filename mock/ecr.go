// Code generated by MockGen. DO NOT EDIT.
// Source: ecr.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	ecr "github.com/aws/aws-sdk-go-v2/service/ecr"
	gomock "github.com/golang/mock/gomock"
)

// MockawsEcrAPI is a mock of awsEcrAPI interface.
type MockawsEcrAPI struct {
	ctrl     *gomock.Controller
	recorder *MockawsEcrAPIMockRecorder
}

// MockawsEcrAPIMockRecorder is the mock recorder for MockawsEcrAPI.
type MockawsEcrAPIMockRecorder struct {
	mock *MockawsEcrAPI
}

// NewMockawsEcrAPI creates a new mock instance.
func NewMockawsEcrAPI(ctrl *gomock.Controller) *MockawsEcrAPI {
	mock := &MockawsEcrAPI{ctrl: ctrl}
	mock.recorder = &MockawsEcrAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockawsEcrAPI) EXPECT() *MockawsEcrAPIMockRecorder {
	return m.recorder
}

// DescribeRepositories mocks base method.
func (m *MockawsEcrAPI) DescribeRepositories(ctx context.Context, params *ecr.DescribeRepositoriesInput, optFns ...func(*ecr.Options)) (*ecr.DescribeRepositoriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRepositories", varargs...)
	ret0, _ := ret[0].(*ecr.DescribeRepositoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRepositories indicates an expected call of DescribeRepositories.
func (mr *MockawsEcrAPIMockRecorder) DescribeRepositories(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRepositories", reflect.TypeOf((*MockawsEcrAPI)(nil).DescribeRepositories), varargs...)
}
