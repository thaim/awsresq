// Code generated by MockGen. DO NOT EDIT.
// Source: cloudwatch.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	cloudwatch "github.com/aws/aws-sdk-go-v2/service/cloudwatch"
	gomock "github.com/golang/mock/gomock"
)

// MockawsCloudwatchAPI is a mock of awsCloudwatchAPI interface.
type MockawsCloudwatchAPI struct {
	ctrl     *gomock.Controller
	recorder *MockawsCloudwatchAPIMockRecorder
}

// MockawsCloudwatchAPIMockRecorder is the mock recorder for MockawsCloudwatchAPI.
type MockawsCloudwatchAPIMockRecorder struct {
	mock *MockawsCloudwatchAPI
}

// NewMockawsCloudwatchAPI creates a new mock instance.
func NewMockawsCloudwatchAPI(ctrl *gomock.Controller) *MockawsCloudwatchAPI {
	mock := &MockawsCloudwatchAPI{ctrl: ctrl}
	mock.recorder = &MockawsCloudwatchAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockawsCloudwatchAPI) EXPECT() *MockawsCloudwatchAPIMockRecorder {
	return m.recorder
}

// ListMetrics mocks base method.
func (m *MockawsCloudwatchAPI) ListMetrics(ctx context.Context, params *cloudwatch.ListMetricsInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.ListMetricsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMetrics", varargs...)
	ret0, _ := ret[0].(*cloudwatch.ListMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetrics indicates an expected call of ListMetrics.
func (mr *MockawsCloudwatchAPIMockRecorder) ListMetrics(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetrics", reflect.TypeOf((*MockawsCloudwatchAPI)(nil).ListMetrics), varargs...)
}
