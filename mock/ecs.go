// Code generated by MockGen. DO NOT EDIT.
// Source: ecs.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	ecs "github.com/aws/aws-sdk-go-v2/service/ecs"
	gomock "github.com/golang/mock/gomock"
)

// MockawsEcsAPI is a mock of awsEcsAPI interface.
type MockawsEcsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockawsEcsAPIMockRecorder
}

// MockawsEcsAPIMockRecorder is the mock recorder for MockawsEcsAPI.
type MockawsEcsAPIMockRecorder struct {
	mock *MockawsEcsAPI
}

// NewMockawsEcsAPI creates a new mock instance.
func NewMockawsEcsAPI(ctrl *gomock.Controller) *MockawsEcsAPI {
	mock := &MockawsEcsAPI{ctrl: ctrl}
	mock.recorder = &MockawsEcsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockawsEcsAPI) EXPECT() *MockawsEcsAPIMockRecorder {
	return m.recorder
}

// DescribeTaskDefinition mocks base method.
func (m *MockawsEcsAPI) DescribeTaskDefinition(ctx context.Context, params *ecs.DescribeTaskDefinitionInput, optFns ...func(*ecs.Options)) (*ecs.DescribeTaskDefinitionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeTaskDefinition", varargs...)
	ret0, _ := ret[0].(*ecs.DescribeTaskDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeTaskDefinition indicates an expected call of DescribeTaskDefinition.
func (mr *MockawsEcsAPIMockRecorder) DescribeTaskDefinition(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeTaskDefinition", reflect.TypeOf((*MockawsEcsAPI)(nil).DescribeTaskDefinition), varargs...)
}

// ListTaskDefinitions mocks base method.
func (m *MockawsEcsAPI) ListTaskDefinitions(ctx context.Context, params *ecs.ListTaskDefinitionsInput, optFns ...func(*ecs.Options)) (*ecs.ListTaskDefinitionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTaskDefinitions", varargs...)
	ret0, _ := ret[0].(*ecs.ListTaskDefinitionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTaskDefinitions indicates an expected call of ListTaskDefinitions.
func (mr *MockawsEcsAPIMockRecorder) ListTaskDefinitions(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTaskDefinitions", reflect.TypeOf((*MockawsEcsAPI)(nil).ListTaskDefinitions), varargs...)
}
